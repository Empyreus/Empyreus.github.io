{"version":3,"sources":["logo.svg","ImagePreview.js","CameraModule.js","App.js","registerServiceWorker.js","index.js"],"names":["ImagePreview","dataUri","classNameFullscreen","isFullscreen","className","src","CameraModule","state","photo","error","handleTakePhoto","console","log","setState","handleCameraError","this","onTakePhoto","onCameraError","imageType","IMAGE_TYPES","JPG","onTakePhotoAnimationDone","handleTakePhotoAnimationDone","Component","App","logo","alt","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"2QAAe,MAA0B,iC,wBCoB1BA,G,YAfa,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,QACzBC,EADqD,EAAnBC,aACG,gCAAkC,GAE3E,OACE,qBAAKC,UAAW,sBAAwBF,EAAxC,SACE,qBAAKG,IAAKJ,QCiDDK,E,4MApDbC,MAAQ,CACNC,MAAO,KACPC,MAAO,G,EAGTC,gBAAkB,SAACT,GAEjBU,QAAQC,IAAI,aACZD,QAAQC,IAAIX,GACZ,EAAKY,SAAS,CACZL,MAAOP,K,EAIXa,kBAAoB,SAACb,GACnB,EAAKY,SAAS,CAAEJ,MAAO,K,uDAGf,IAAD,OAIP,OAAIM,KAAKR,MAAME,MACN,8CAEqB,OAArBM,KAAKR,MAAMC,MACV,cAAC,IAAD,CACNQ,YAAa,SAACf,GAAc,EAAKS,gBAAgBT,IACjDgB,cAAe,SAACR,GAAY,EAAKK,kBAAkBL,IACnDS,UAAWC,cAAYC,MAGG,OAArBL,KAAKR,MAAMC,MAEhB,mCAEKO,KAAKR,MAAMC,MACR,cAAC,EAAD,CAAcP,QAASc,KAAKR,MAAMC,MAClCL,aAnBS,QAqBT,cAAC,IAAD,CAAQkB,yBAA0BC,6BAClCnB,aAtBS,eAahB,M,GAjCkBoB,aCgBZC,E,uKAfX,OACE,sBAAKpB,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKoB,EAAMrB,UAAU,WAAWsB,IAAI,SACzC,oBAAItB,UAAU,YAAd,8CAEF,cAAC,EAAD,IACA,mBAAGA,UAAU,YAAb,kD,GATUmB,aCKZI,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBlC,QACf4B,UAAUC,cAAcQ,WAK1BjC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBiC,OAAM,SAAApC,GACLE,QAAQF,MAAM,4CAA6CA,MCzEjEqC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBd,UAAW,CAGzE,GADkB,IAAIe,IAAIC,sBAAwBtB,OAAOC,UAC3CsB,SAAWvB,OAAOC,SAASsB,OAIvC,OAGFvB,OAAOwB,iBAAiB,QAAQ,WAC9B,IAAMnB,EAAK,UAAMiB,sBAAN,sBAEPxB,IAiDV,SAAiCO,GAE/BoB,MAAMpB,GACHI,MAAK,SAAAiB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CxB,UAAUC,cAAcwB,MAAMtB,MAAK,SAAAC,GACjCA,EAAasB,aAAavB,MAAK,WAC7BT,OAAOC,SAASgC,eAKpB7B,EAAgBC,MAGnBW,OAAM,WACLlC,QAAQC,IACN,oEArEAmD,CAAwB7B,GAIxBC,UAAUC,cAAcwB,MAAMtB,MAAK,WACjC3B,QAAQC,IACN,gHAMJqB,EAAgBC,OCzCxB8B,K","file":"static/js/main.3e5787e0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.2d27ead7.svg\";","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './ImagePreview.css';\r\n\r\nexport const ImagePreview = ({ dataUri, isFullscreen }) => {\r\n  let classNameFullscreen = isFullscreen ? 'demo-image-preview-fullscreen' : '';\r\n\r\n  return (\r\n    <div className={'demo-image-preview ' + classNameFullscreen}>\r\n      <img src={dataUri} />\r\n    </div>\r\n  );\r\n};\r\n\r\nImagePreview.propTypes = {\r\n  dataUri: PropTypes.string,\r\n  isFullscreen: PropTypes.bool\r\n};\r\n\r\nexport default ImagePreview;","import React, { Component } from 'react';\r\n\r\nimport Camera, { IMAGE_TYPES } from 'react-html5-camera-photo';\r\nimport 'react-html5-camera-photo/build/css/index.css';\r\nimport ImagePreview from './ImagePreview';\r\n\r\nclass CameraModule extends Component {\r\n  state = {\r\n    photo: null,\r\n    error: 0\r\n  }\r\n\r\n  handleTakePhoto = (dataUri) => {\r\n    // Do stuff with the photo...\r\n    console.log('takePhoto');\r\n    console.log(dataUri);\r\n    this.setState({\r\n      photo: dataUri\r\n    })\r\n  }\r\n\r\n  handleCameraError = (dataUri) => {\r\n    this.setState({ error: 1 });\r\n  }\r\n\r\n  render() {\r\n    const isFullscreen = false;\r\n\r\n\r\n    if (this.state.error) {\r\n      return <p>Bogged Camera</p>\r\n    }\r\n    else if (this.state.photo === null) {\r\n      return (<Camera\r\n        onTakePhoto={(dataUri) => { this.handleTakePhoto(dataUri) }}\r\n        onCameraError={(error) => { this.handleCameraError(error) }}\r\n        imageType={IMAGE_TYPES.JPG}\r\n      />)\r\n    }\r\n    else if (this.state.photo !== null) {\r\n      return (\r\n        <>\r\n          {\r\n            (this.state.photo)\r\n              ? <ImagePreview dataUri={this.state.photo}\r\n                isFullscreen={isFullscreen}\r\n              />\r\n              : <Camera onTakePhotoAnimationDone={handleTakePhotoAnimationDone}\r\n                isFullscreen={isFullscreen}\r\n              />\r\n          }\r\n        </>\r\n\r\n      )\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport default CameraModule;","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport CameraModule from './CameraModule'\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <h1 className=\"App-title\">Welcome to RJ Souza's Website</h1>\r\n        </header>\r\n        <CameraModule/>\r\n        <p className=\"App-intro\">\r\n          Kyle and Martin's Test Camera\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}